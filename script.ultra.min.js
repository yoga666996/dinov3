// Ultra-lightweight script - core functionality only
(function(){
'use strict';

// Defer initialization of non-critical functionality
let initialized = false;

// Core functionality immediate initialization
function initCore() {
    // Optimized smooth scrolling
    const links = document.querySelectorAll('a[href^="#"]');
    links.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
        });
    });

    // Simplified scroll listening
    let ticking = false;
    function updateOnScroll() {
        const header = document.querySelector('.header');
        if (header) {
            header.style.background = window.scrollY > 50 ? 
                'rgba(26,26,46,0.98)' : 'rgba(26,26,46,0.95)';
        }
        ticking = false;
    }

    window.addEventListener('scroll', () => {
        if (!ticking) {
            requestAnimationFrame(updateOnScroll);
            ticking = true;
        }
    }, { passive: true });
}

// Defer loading non-critical functionality
function initEnhancements() {
    if (initialized) return;
    initialized = true;

    // Lazy load images
    const images = document.querySelectorAll('img[data-src]');
    if (images.length && 'IntersectionObserver' in window) {
        const imageObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;
                    img.src = img.dataset.src;
                    img.classList.add('loaded');
                    imageObserver.unobserve(img);
                }
            });
        }, { rootMargin: '50px' });

        images.forEach(img => imageObserver.observe(img));
    }

    // Simplified animations
    const animatedElements = document.querySelectorAll('.animate-on-scroll');
    if (animatedElements.length && 'IntersectionObserver' in window) {
        const animationObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.opacity = '1';
                    entry.target.style.transform = 'translateY(0)';
                    animationObserver.unobserve(entry.target);
                }
            });
        }, { threshold: 0.1 });

        animatedElements.forEach(el => {
            el.style.opacity = '0';
            el.style.transform = 'translateY(20px)';
            el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
            animationObserver.observe(el);
        });
    }
}

// Initialize core functionality immediately
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initCore);
} else {
    initCore();
}

// Defer initialization of enhanced functionality
setTimeout(initEnhancements, 1000);

// Initialize immediately after user interaction
['click', 'scroll', 'touchstart'].forEach(event => {
    document.addEventListener(event, initEnhancements, { once: true, passive: true });
});

})();